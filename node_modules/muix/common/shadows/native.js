//for testing with https://snack.expo.io/
System.register(["tslib", "react", "react-native"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var tslib_1, react_1, react_native_1, android, iosW, iosH, iosOpacity, iosRadius, getNativeShadow, style, AppComp;
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (react_1_1) {
                react_1 = react_1_1;
            },
            function (react_native_1_1) {
                react_native_1 = react_native_1_1;
            }
        ],
        execute: function () {
            android = [0, 2, 4, 9, 12, 15, 18, 20, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];
            iosW = function (deep) {
                switch (deep) {
                    case 0:
                    case 1: return 0;
                    default: return deep / 10;
                }
            };
            iosH = function (deep) {
                switch (deep) {
                    case 0: return 0;
                    default: return 0.7 + (deep - 1) * 0.7;
                }
            };
            iosOpacity = function (deep) {
                switch (deep) {
                    case 0:
                    case 1: return 0.7;
                    default: return 0.7 - deep * 0.02;
                }
            };
            iosRadius = function (deep) {
                switch (deep) {
                    case 0: return 2;
                    case 1: return 3;
                    default: return 4 + deep * 0.1;
                }
            };
            getNativeShadow = function (deep) {
                if (deep == 0)
                    return {};
                return {
                    shadowColor: 'black',
                    shadowOffset: { width: iosW(deep), height: iosH(deep) },
                    shadowOpacity: iosOpacity(deep),
                    shadowRadius: iosRadius(deep),
                    elevation: android[deep],
                };
            };
            style = {
                width: 50,
                height: 50,
                margin: 20,
                borderWidth: 1,
                borderColor: 'brown',
                borderStyle: 'solid',
                backgroundColor: 'black',
                flexShrink: 0,
            };
            AppComp = /** @class */ (function (_super) {
                tslib_1.__extends(AppComp, _super);
                function AppComp() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                AppComp.prototype.render = function () {
                    return react_1.default.createElement(react_native_1.ScrollView, { style: { paddingTop: 20 } },
                        react_1.default.createElement(react_native_1.View, { style: { flexDirection: 'row', flexWrap: 'wrap' } }, android.map(function (sh, idx) { return react_1.default.createElement(react_native_1.View, { key: idx, style: tslib_1.__assign({}, style, getNativeShadow(idx)) }); })));
                };
                return AppComp;
            }(react_1.default.Component));
            exports_1("default", AppComp);
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3Rlc3QvY29tbW9uL3NoYWRvd3MvbmF0aXZlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx5Q0FBeUM7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQU1uQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBRXRHLElBQUksR0FBRyxVQUFDLElBQVk7Z0JBQ3hCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2IsS0FBSyxDQUFDLENBQUM7b0JBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtvQkFDeEIsU0FBUyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQTtnQkFDM0IsQ0FBQztZQUNILENBQUMsQ0FBQTtZQUVLLElBQUksR0FBRyxVQUFDLElBQVk7Z0JBQ3hCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2IsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQTtvQkFDaEIsU0FBUyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtnQkFDeEMsQ0FBQztZQUNILENBQUMsQ0FBQTtZQUVLLFVBQVUsR0FBRyxVQUFDLElBQVk7Z0JBQzlCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2IsS0FBSyxDQUFDLENBQUM7b0JBQ1AsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQTtvQkFDbEIsU0FBUyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUE7Z0JBQ25DLENBQUM7WUFDSCxDQUFDLENBQUE7WUFFSyxTQUFTLEdBQUcsVUFBQyxJQUFZO2dCQUM3QixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNiLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7b0JBQ2hCLEtBQUssQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7b0JBQ2hCLFNBQVMsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO2dCQUNqQyxDQUFDO1lBQ0gsQ0FBQyxDQUFBO1lBRUssZUFBZSxHQUFHLFVBQUMsSUFBSTtnQkFDM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDWixNQUFNLENBQUMsRUFBRSxDQUFDO2dCQUNaLE1BQU0sQ0FBQztvQkFDTCxXQUFXLEVBQUUsT0FBTztvQkFDcEIsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN2RCxhQUFhLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQztvQkFDL0IsWUFBWSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUM7b0JBQzdCLFNBQVMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDO2lCQUN6QixDQUFDO1lBQ0osQ0FBQyxDQUFDO1lBRUksS0FBSyxHQUFHO2dCQUNaLEtBQUssRUFBRSxFQUFFO2dCQUNULE1BQU0sRUFBRSxFQUFFO2dCQUNWLE1BQU0sRUFBRSxFQUFFO2dCQUNWLFdBQVcsRUFBRSxDQUFDO2dCQUNkLFdBQVcsRUFBRSxPQUFPO2dCQUNwQixXQUFXLEVBQUUsT0FBTztnQkFDcEIsZUFBZSxFQUFFLE9BQU87Z0JBQ3hCLFVBQVUsRUFBRSxDQUFDO2FBQ0QsQ0FBQTtZQUVkO2dCQUFzQixtQ0FBZTtnQkFBckM7O2dCQVFBLENBQUM7Z0JBUEMsd0JBQU0sR0FBTjtvQkFDRSxNQUFNLENBQUMsOEJBQUMseUJBQVUsSUFBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO3dCQUMxQyw4QkFBQyxtQkFBSSxJQUFDLEtBQUssRUFBRSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSyxPQUFBLDhCQUFDLG1CQUFJLElBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLHVCQUFPLEtBQUssRUFBSyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQU0sRUFBaEUsQ0FBZ0UsQ0FBQyxDQUN0RixDQUNJLENBQUE7Z0JBQ2YsQ0FBQztnQkFDSCxjQUFDO1lBQUQsQ0FBQyxBQVJELENBQXNCLGVBQUssQ0FBQyxTQUFTLEdBUXBDO2lDQUVjLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyIvL2ZvciB0ZXN0aW5nIHdpdGggaHR0cHM6Ly9zbmFjay5leHBvLmlvL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IFNjcm9sbFZpZXcsIFZpZXcsIFRleHQsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcblxuY29uc3QgYW5kcm9pZCA9IFswLCAyLCA0LCA5LCAxMiwgMTUsIDE4LCAyMCwgMjIsIDI0LCAyNiwgMjgsIDI5LCAzMCwgMzEsIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDBdXG5cbmNvbnN0IGlvc1cgPSAoZGVlcDogbnVtYmVyKSA9PiB7XG4gIHN3aXRjaCAoZGVlcCkge1xuICAgIGNhc2UgMDogY2FzZSAxOiByZXR1cm4gMFxuICAgIGRlZmF1bHQ6IHJldHVybiBkZWVwIC8gMTBcbiAgfVxufVxuXG5jb25zdCBpb3NIID0gKGRlZXA6IG51bWJlcikgPT4ge1xuICBzd2l0Y2ggKGRlZXApIHtcbiAgICBjYXNlIDA6IHJldHVybiAwXG4gICAgZGVmYXVsdDogcmV0dXJuIDAuNyArIChkZWVwIC0gMSkgKiAwLjdcbiAgfVxufVxuXG5jb25zdCBpb3NPcGFjaXR5ID0gKGRlZXA6IG51bWJlcikgPT4ge1xuICBzd2l0Y2ggKGRlZXApIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxOiByZXR1cm4gMC43XG4gICAgZGVmYXVsdDogcmV0dXJuIDAuNyAtIGRlZXAgKiAwLjAyXG4gIH1cbn1cblxuY29uc3QgaW9zUmFkaXVzID0gKGRlZXA6IG51bWJlcikgPT4ge1xuICBzd2l0Y2ggKGRlZXApIHtcbiAgICBjYXNlIDA6IHJldHVybiAyXG4gICAgY2FzZSAxOiByZXR1cm4gM1xuICAgIGRlZmF1bHQ6IHJldHVybiA0ICsgZGVlcCAqIDAuMTtcbiAgfVxufVxuXG5jb25zdCBnZXROYXRpdmVTaGFkb3cgPSAoZGVlcCkgPT4ge1xuICBpZiAoZGVlcCA9PSAwKVxuICAgIHJldHVybiB7fTtcbiAgcmV0dXJuIHtcbiAgICBzaGFkb3dDb2xvcjogJ2JsYWNrJyxcbiAgICBzaGFkb3dPZmZzZXQ6IHsgd2lkdGg6IGlvc1coZGVlcCksIGhlaWdodDogaW9zSChkZWVwKSB9LFxuICAgIHNoYWRvd09wYWNpdHk6IGlvc09wYWNpdHkoZGVlcCksXG4gICAgc2hhZG93UmFkaXVzOiBpb3NSYWRpdXMoZGVlcCksXG4gICAgZWxldmF0aW9uOiBhbmRyb2lkW2RlZXBdLFxuICB9O1xufTtcblxuY29uc3Qgc3R5bGUgPSB7XG4gIHdpZHRoOiA1MCxcbiAgaGVpZ2h0OiA1MCxcbiAgbWFyZ2luOiAyMCxcbiAgYm9yZGVyV2lkdGg6IDEsXG4gIGJvcmRlckNvbG9yOiAnYnJvd24nLFxuICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxuICBmbGV4U2hyaW5rOiAwLFxufSBhcyBWaWV3U3R5bGVcblxuY2xhc3MgQXBwQ29tcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFNjcm9sbFZpZXcgc3R5bGU9e3sgcGFkZGluZ1RvcDogMjAgfX0+XG4gICAgICA8VmlldyBzdHlsZT17eyBmbGV4RGlyZWN0aW9uOiAncm93JywgZmxleFdyYXA6ICd3cmFwJyB9fT5cbiAgICAgICAge2FuZHJvaWQubWFwKChzaCwgaWR4KSA9PiA8VmlldyBrZXk9e2lkeH0gc3R5bGU9e3sgLi4uc3R5bGUsIC4uLmdldE5hdGl2ZVNoYWRvdyhpZHgpIH19IC8+KX1cbiAgICAgIDwvVmlldz5cbiAgICA8L1Njcm9sbFZpZXc+XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwQ29tcFxuXG5cbiJdfQ==