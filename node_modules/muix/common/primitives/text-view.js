System.register(["tslib", "react", "muix-primitives"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var tslib_1, react_1, muix_primitives_1, P, app, converter;
    return {
        setters: [
            function (tslib_1_1) {
                tslib_1 = tslib_1_1;
            },
            function (react_1_1) {
                react_1 = react_1_1;
            },
            function (muix_primitives_1_1) {
                muix_primitives_1 = muix_primitives_1_1;
            }
        ],
        execute: function () {
            P = function (props) {
                var children = props.children, rest = tslib_1.__rest(props, ["children"]);
                return react_1.default.createElement(muix_primitives_1.Text, { style: { marginBottom: 8 } }, children);
            };
            app = function () {
                return react_1.default.createElement(muix_primitives_1.ScrollView, { style: { paddingTop: 24 } },
                    react_1.default.createElement(muix_primitives_1.Text, { onClick: function () { return alert('Here I am'); } }, "do something"),
                    react_1.default.createElement(muix_primitives_1.Text, null,
                        "afsd fas df asd sd f asd fasd f asdf asd f asdf asd f asdf asd fa sdf asd fasd f asdf as f asdf asdf",
                        react_1.default.createElement(muix_primitives_1.Text, { style: { backgroundColor: 'red', color: 'white' } }, "40 40 40 40 40 40 40 TITLE:  asd f asdf asd f sad fsa df sad fsa df asdf sad f sadf asd fsda f sdaf"),
                        "?? ?? ?? ?? ?? ?? ?? ?? afsd fas df asd sd f asd fasd f asdf asd f asdf asd f asdf asd fa sdf asd fasd f asdf as f asdf asdf",
                        react_1.default.createElement(muix_primitives_1.Text, null, "20 20 asd f asd fsad f asdf sad f"),
                        "afsd fas df asd sd f asd fasd f asdf asd f asdf asd f asdf asd fa sdf asd fasd f asdf as f asdf asdf",
                        react_1.default.createElement(muix_primitives_1.Text, null, "10 10 10 10 10 10 10 10 10 text text text text text text text text text text text text text text text text text text text text text text text text"),
                        react_1.default.createElement(muix_primitives_1.Text, null, "20 20 20 ")),
                    react_1.default.createElement(muix_primitives_1.Text, null, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
                    react_1.default.createElement(muix_primitives_1.Text, null, "TITLE:"),
                    react_1.default.createElement(P, null, "text text text text text text text text text text text text text text text text text text text text text text text text"),
                    react_1.default.createElement(P, null, "text text text text text text text text text text text text text text text text text text text text text text text text"),
                    react_1.default.createElement(P, null, "text text text text text text text text text text text text text text text text text text text text text text text text"));
            };
            exports_1("default", app);
            //https://github.com/oyyd/htmlparser2-without-node-native
            converter = function (getMarkup) {
                var fontSize = 14;
                var defaultFont = { color: 'black', backgroundColor: 'white', size: fontSize, weight: 0, ital: false, und: false, strike: false };
                //https://www.w3schools.com/cssref/css_default_values.asp
                var blocksDefaults = {
                    div: {},
                    blockquote: { margin: { Left: 40 }, font: {} },
                    p: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
                    h1: { margin: { Top: 2 * 0.67 * fontSize, Bottom: 2 * 0.67 * fontSize }, font: { size: 2 * fontSize, weight: 1 } },
                    h2: { margin: { Top: 1.5 * 0.83 * fontSize, Bottom: 1.5 * 0.83 * fontSize }, font: { size: 1.5 * fontSize, weight: 1 } },
                    h3: { margin: { Top: 1.17 * fontSize, Bottom: 1.17 * fontSize }, font: { size: 1.17 * fontSize, weight: 1 } },
                    h4: { margin: { Top: 1.33 * fontSize, Bottom: 1.33 * fontSize }, font: { size: 1 * fontSize, weight: 1 } },
                    ul: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
                    ol: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
                    li: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
                };
                var old = react_1.default.createElement;
                //parsing
                var parsed;
                try {
                    react_1.default['createElement'] = function (type, pars) {
                        var children = [];
                        for (var _i = 2; _i < arguments.length; _i++) {
                            children[_i - 2] = arguments[_i];
                        }
                        var __source = pars.__source, _a = pars.style, margin = _a.margin, marginTop = _a.marginTop, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, marginRight = _a.marginRight, padding = _a.padding, paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, paddingRight = _a.paddingRight, borderColor = _a.borderColor, borderWidth = _a.borderWidth, borderStyle = _a.borderStyle, color = _a.color, backgroundColor = _a.backgroundColor, fontSize = _a.fontSize, fontWeight = _a.fontWeight, fontStyle = _a.fontStyle, textDecorationLine = _a.textDecorationLine, styleRest = tslib_1.__rest(_a, ["margin", "marginTop", "marginBottom", "marginLeft", "marginRight", "padding", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "borderColor", "borderWidth", "borderStyle", "color", "backgroundColor", "fontSize", "fontWeight", "fontStyle", "textDecorationLine"]), props = tslib_1.__rest(pars, ["__source", "style"]);
                        return { type: type, props: props, children: children };
                    };
                    parsed = getMarkup();
                }
                finally {
                    react_1.default.createElement = old;
                }
                var convert = function (block, parent) {
                    var start = parent || { margin: {}, padding: {}, border: {}, font: tslib_1.__assign({}, defaultFont) };
                    //TODO: merge block style to start
                    var childs = null;
                    if (block.childs)
                        childs = block.childs.map(function (ch) {
                            if (typeof ch == 'string')
                                return ch;
                            return convert(ch, start);
                        });
                    //const blockStack: BlockStackItem[] = []
                    return { type: block.type, pars: start, childs: childs };
                };
                //console.log(parsed)
                //parsed[0].props.onClick()
                if (Array.isArray(parsed))
                    return parsed.map(function (p) { return convert(p); });
                else
                    return convert(parsed);
            };
        }
    };
});
//# sourceMappingURL=data:application/json;base64,