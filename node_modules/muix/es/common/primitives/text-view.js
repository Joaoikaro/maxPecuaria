import * as tslib_1 from "tslib";
//https://github.com/jsdf/react-native-htmlview
//https://github.com/vitalets/react-native-extended-stylesheet
//https://github.com/alekhurst/react-native-elevated-view/blob/master/index.js
//jspm build ./app-native/snack/mui/index.js ./app-native/snack/mui/bundle.js
import React from 'react';
import { Text, ScrollView } from 'muix-primitives';
const P = props => {
    const { children } = props, rest = tslib_1.__rest(props, ["children"]);
    return <Text style={{ marginBottom: 8 }}>
    {children}
  </Text>;
};
const app = () => {
    return <ScrollView style={{ paddingTop: 24 }}>
    <Text onClick={() => alert('Here I am')}>do something</Text>
    <Text>
      afsd fas df asd sd f asd fasd f asdf asd f asdf asd f asdf asd fa sdf asd fasd f asdf as f asdf asdf
      <Text style={{ backgroundColor: 'red', color: 'white' }}>40 40 40 40 40 40 40 TITLE:  asd f asdf asd f sad fsa df sad fsa df asdf sad f sadf asd fsda f sdaf</Text>
      ?? ?? ?? ?? ?? ?? ?? ?? afsd fas df asd sd f asd fasd f asdf asd f asdf asd f asdf asd fa sdf asd fasd f asdf as f asdf asdf
      <Text>20 20 asd f asd fsad f asdf sad f</Text>
      afsd fas df asd sd f asd fasd f asdf asd f asdf asd f asdf asd fa sdf asd fasd f asdf as f asdf asdf
      <Text>
        10 10 10 10 10 10 10 10 10 text text text text text text text text text text text text
        text text text text text text text text text text text text
      </Text>
      <Text>20 20 20 </Text>
    </Text>
    <Text>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</Text>
    <Text>TITLE:</Text>
    <P>
      text text text text text text text text text text text text
      text text text text text text text text text text text text
    </P>
    <P>
      text text text text text text text text text text text text
      text text text text text text text text text text text text
    </P>
    <P>
      text text text text text text text text text text text text
    text text text text text text text text text text text text
    </P>
  </ScrollView>;
};
export default app;
//https://github.com/oyyd/htmlparser2-without-node-native
const converter = (getMarkup) => {
    const fontSize = 14;
    const defaultFont = { color: 'black', backgroundColor: 'white', size: fontSize, weight: 0, ital: false, und: false, strike: false };
    //https://www.w3schools.com/cssref/css_default_values.asp
    const blocksDefaults = {
        div: {},
        blockquote: { margin: { Left: 40 }, font: {} },
        p: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
        h1: { margin: { Top: 2 * 0.67 * fontSize, Bottom: 2 * 0.67 * fontSize }, font: { size: 2 * fontSize, weight: 1 } },
        h2: { margin: { Top: 1.5 * 0.83 * fontSize, Bottom: 1.5 * 0.83 * fontSize }, font: { size: 1.5 * fontSize, weight: 1 } },
        h3: { margin: { Top: 1.17 * fontSize, Bottom: 1.17 * fontSize }, font: { size: 1.17 * fontSize, weight: 1 } },
        h4: { margin: { Top: 1.33 * fontSize, Bottom: 1.33 * fontSize }, font: { size: 1 * fontSize, weight: 1 } },
        ul: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
        ol: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
        li: { margin: { Top: fontSize, Bottom: fontSize }, font: {} },
    };
    const old = React.createElement;
    //parsing
    let parsed;
    try {
        React['createElement'] = (type, pars, ...children) => {
            const { __source } = pars, _a = pars.style, { margin, marginTop, marginBottom, marginLeft, marginRight, padding, paddingTop, paddingBottom, paddingLeft, paddingRight, borderColor, borderWidth, borderStyle, color, backgroundColor, fontSize, fontWeight, fontStyle, textDecorationLine } = _a, styleRest = tslib_1.__rest(_a, ["margin", "marginTop", "marginBottom", "marginLeft", "marginRight", "padding", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "borderColor", "borderWidth", "borderStyle", "color", "backgroundColor", "fontSize", "fontWeight", "fontStyle", "textDecorationLine"]), props = tslib_1.__rest(pars, ["__source", "style"]);
            return { type, props, children };
        };
        parsed = getMarkup();
    }
    finally {
        React.createElement = old;
    }
    const convert = (block, parent) => {
        const start = parent || { margin: {}, padding: {}, border: {}, font: Object.assign({}, defaultFont) };
        //TODO: merge block style to start
        let childs = null;
        if (block.childs)
            childs = block.childs.map(ch => {
                if (typeof ch == 'string')
                    return ch;
                return convert(ch, start);
            });
        //const blockStack: BlockStackItem[] = []
        return { type: block.type, pars: start, childs };
    };
    //console.log(parsed)
    //parsed[0].props.onClick()
    if (Array.isArray(parsed))
        return parsed.map(p => convert(p));
    else
        return convert(parsed);
};
//<Typography>Colors</Typography>
//<Text>{JSON.stringify(createMuiTheme({}), null, 2)}</Text>
